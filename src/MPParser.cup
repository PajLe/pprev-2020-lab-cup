//import section

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import AST.*;

import SymbolTable.*;


parser code {:
   
   SymbolTable symbolTable;
   
:};

init with {:
	symbolTable = new SymbolTable();
:}

//Terminal symbols
terminal MAIN, LEFTPAR, RIGHTPAR, LEFTCURLY, RIGHTCURLY, SEMICOLON, INT, REAL, BOOL;
terminal IF, ELIF, ELSE, COLON, ASSIGN, LESS, LESSEQ, EQ, NOTEQ, GREATER, GREATEREQ;
terminal String ID;
terminal Integer INTCONST;
terminal Double REALCONST;
terminal Boolean BOOLCONST;

//Nonterminal symbols
non terminal Block Program, Block;
non terminal Statement Statement;
non terminal IfStatement IfStatement;
non terminal ArrayList Statements, ElsePart, ElifList;
non terminal ElifStatement Elif;
non terminal ElseStatement ElseStatement;
non terminal String RelOp; 
non terminal Assignment Assignment;
non terminal RelExpression RelExpression;
non terminal TypeNode Type;
non terminal Constant Const;
non terminal Expression Term;
non terminal Variable Variable;

// others
non terminal Variables;

//Grammar
Program ::= MAIN LEFTPAR RIGHTPAR Block: b
{:
	RESULT = b;
:};

Block ::= LEFTCURLY Variables Statements:stmts RIGHTCURLY 
{:
	Block a = new Block();
	for (Object stmt : stmts)
		a.addStatement((Statement)stmt);

	RESULT = a;
:};

Variables ::= Variables Variable:var
{:
	parser.symbolTable.addVar(var.name, var.type);
:}

| Variable:var
{:
	parser.symbolTable.addVar(var.name, var.type);
:};

Variable ::= Type:t ID:name SEMICOLON
{:
	RESULT = new Variable(name, t, null);
:};

Type ::= INT
{:
	RESULT = parser.symbolTable.getType("integer");
:} 

| REAL
{:
	RESULT = parser.symbolTable.getType("real");
:}

| BOOL
{:
	RESULT = parser.symbolTable.getType("boolean");
:};

Statements ::= Statements:stmts SEMICOLON Statement:statement
{:
	stmts.add(statement);
	RESULT = stmts;
:} 

| Statement:statement
{:
	ArrayList stmts = new ArrayList();
	stmts.add(statement);
	RESULT = stmts;
:}
;

Statement ::= Assignment: assignmentStatement
{:
	RESULT = assignmentStatement;
:}

| IfStatement: ifStatement
{:
	RESULT = ifStatement;
:}
;

IfStatement ::= IF LEFTPAR RelExpression:reExp RIGHTPAR COLON Block:b ElsePart:elsePart
{:
	ElseStatement elseStatement = null;
	ArrayList<ElifStatement> elifStatements = new ArrayList<ElifStatement>();
	if (elsePart != null) {
		for (Object part : elsePart) {
			if (part instanceof ElseStatement)
				elseStatement = (ElseStatement)part;
			else 
				elifStatements.add((ElifStatement)part);
		}
	}
	IfStatement ifStmt = new IfStatement(reExp, b, elifStatements, elseStatement);
	RESULT = ifStmt;
:};

ElsePart ::= ElifList:elifList
{:
	RESULT = elifList;
:}

| ElseStatement:elseStatement
{:
	ArrayList withOnlyElseStatement = new ArrayList();
	withOnlyElseStatement.add(elseStatement);
	RESULT = withOnlyElseStatement;
:}
 
|
{:
	RESULT = null;
:} 
;

ElifList ::= ElifList:elifList Elif:elif
{:
	elifList.add(elif);
	RESULT = elifList;
:}

| Elif:elif
{:
	ArrayList elifList = new ArrayList();
	elifList.add(elif);
	RESULT = elifList;
:} 

| ElifList:elifList ElseStatement:elseStatement
{:
	elifList.add(elseStatement);
	RESULT = elifList;
:}
;

Elif ::= ELIF LEFTPAR RelExpression:reExp RIGHTPAR COLON Block:b
{:
	RESULT = new ElifStatement(reExp, b);
:};

ElseStatement ::= ELSE COLON Block:b
{:
	RESULT = new ElseStatement(b);
:};

RelExpression ::= Term:t1 RelOp:opCode Term:t2 
{:
	RESULT = new RelExpression(t1, t2, opCode);
:}

| Term:t1
{:
	RESULT = new RelExpression(t1);
:};

Term ::= ID:name
{:
	Variable var = parser.symbolTable.getVar(name);
	RESULT = new VariableExpression(var);
:}

| Const:c
{:
	RESULT = new ConstantExpression(c);
:};

Const ::= INTCONST:c
{:
	RESULT = new Constant(parser.symbolTable.getType("integer"), c);
:}

| REALCONST:c
{:
	RESULT = new Constant(parser.symbolTable.getType("real"), c);
:}

| BOOLCONST:c
{:
	RESULT = new Constant(parser.symbolTable.getType("boolean"), c);
:};

RelOp ::= LESS
{:
	RESULT = "Compare_Less";
:}

| LESSEQ
{:
	RESULT = "Compare_Less_Or_Equal";
:}

| EQ 
{:
	RESULT = "Compare_Equal";
:}

| NOTEQ 
{:
	RESULT = "Compare_Not_Equal";
:}

| GREATER 
{:
	RESULT = "Compare_Greater";
:}

| GREATEREQ 
{:
	RESULT = "Compare_Greater_Or_Equal";
:}
      ;

Assignment ::= ID:name ASSIGN Term:term
{:
	Variable var = parser.symbolTable.getVar(name);
	RESULT = new Assignment(var, term);
:};



