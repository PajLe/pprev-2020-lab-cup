//import section

import java_cup.runtime.*;
import java.io.*;

parser code {:
   public static void main( String[] args )
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   Scanner scanner = new MPLexer( file );
		   MPParser parser = new MPParser( scanner );
		   parser.parse();
	  }
	  catch( Exception e )
	  {
		   e.printStackTrace();
	  }
   }
:};


//Terminal symbols
terminal MAIN, LEFTPAR, RIGHTPAR, LEFTCURLY, RIGHTCURLY, ID, SEMICOLON, INT, REAL, BOOL;
terminal IF, ELIF, ELSE, CONST, COLON, ASSIGN, LESS, LESSEQ, EQ, NOTEQ, GREATER, GREATEREQ;

//Nonterminal symbols
non terminal Program, Block, Variables, Variable, Type, Statements, Statement, IfStatement;
non terminal ElsePart, ElifList, Elif, ElseStatement, RelExpression, Term, RelOp, Assignment;




//Grammar
Program ::= MAIN LEFTPAR RIGHTPAR Block
            {:
               System.out.println( "Redukcija po smeni 1." );
            :};

Block ::= LEFTCURLY Variables Statements RIGHTCURLY
             {:
                System.out.println( "Redukcija po smeni 2." );
             :};

Variables ::= Variables Variable 
            {:
               System.out.println( "Redukcija po smeni 3." );
            :}
          | Variable
            {:
               System.out.println( "Redukcija po smeni 4." );
            :}
          ;

Variable ::= Type ID SEMICOLON
                {:
                   System.out.println( "Redukcija po smeni 5." );
                :};

Type ::= INT
             {:
                System.out.println( "Redukcija po smeni 6." );
             :} 
           | REAL
             {:
                System.out.println( "Redukcija po smeni 7." );
             :}
           | BOOL
           	 {:
                System.out.println( "Redukcija po smeni 8." );
			 :}
		   ;

Statements ::= Statements SEMICOLON Statement 
        {:
           System.out.println( "Redukcija po smeni 9." );
        :}
      | Statement
        {:
           System.out.println( "Redukcija po smeni 10." );
        :}
      ;

Statement ::= Assignment
         {:
            System.out.println( "Redukcija po smeni 11." );
         :}
       | IfStatement
         {:
            System.out.println( "Redukcija po smeni 12." );
         :}
       ;

IfStatement ::= IF LEFTPAR RelExpression RIGHTPAR COLON Block ElsePart 
           {:
              System.out.println( "Redukcija po smeni 13." );
           :}
         ;

ElsePart ::= ElifList
            {:
               System.out.println( "Redukcija po smeni 14." );
            :}
          | ElseStatement 
            {:
               System.out.println( "Redukcija po smeni 15." );
            :}
          | 
            {:
               System.out.println( "Redukcija po smeni 16." );
            :}
          ;

ElifList ::= ElifList Elif
         {:
            System.out.println( "Redukcija po smeni 17." );
         :}
       | Elif 
         {:
            System.out.println( "Redukcija po smeni 18." );
         :}
       | ElifList ElseStatement
         {:
            System.out.println( "Redukcija po smeni 19." );
         :}
       ;

Elif ::= ELIF LEFTPAR RelExpression RIGHTPAR COLON Block
          {:
             System.out.println( "Redukcija po smeni 20." );
          :};

ElseStatement ::= ELSE COLON Block
           {:
              System.out.println( "Redukcija po smeni 21." );
           :};

RelExpression ::= Term RelOp Term 
          {:
             System.out.println( "Redukcija po smeni 22." );
          :}
        | Term
          {:
             System.out.println( "Redukcija po smeni 23." );
          :}
        ;

Term ::= ID
           {:
              System.out.println( "Redukcija po smeni 24." );
           :}
         | CONST
           {:
              System.out.println( "Redukcija po smeni 25." );
           :}
         ;

RelOp ::= LESS
           {:
              System.out.println( "Redukcija po smeni 26." );
           :}
         | LESSEQ
           {:
              System.out.println( "Redukcija po smeni 27." );
           :}
         | EQ 
           {:
              System.out.println( "Redukcija po smeni 28." );
           :}
         | NOTEQ 
           {:
              System.out.println( "Redukcija po smeni 29." );
           :}
         | GREATER 
           {:
              System.out.println( "Redukcija po smeni 30." );
           :}
         | GREATEREQ 
           {:
              System.out.println( "Redukcija po smeni 31." );
           :}
         ;

Assignment ::= ID ASSIGN Term
          {:
             System.out.println( "Redukcija po smeni 32." );
          :};


	





