
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Jan 01 19:35:25 CET 2021
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Fri Jan 01 19:35:25 CET 2021
  */
public class MPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParser() {super();}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\003\006\000\002\002\004\000\002\003" +
    "\006\000\002\003\005\000\002\003\004\000\002\003\003" +
    "\000\002\004\006\000\002\004\006\000\002\004\005\000" +
    "\002\004\004\000\002\005\004\000\002\005\003\000\002" +
    "\006\005\000\002\006\005\000\002\006\004\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\010\005" +
    "\000\002\010\005\000\002\010\003\000\002\011\003\000" +
    "\002\011\003\000\002\012\011\000\002\012\010\000\002" +
    "\012\007\000\002\012\006\000\002\012\005\000\002\012" +
    "\004\000\002\013\003\000\002\013\003\000\002\013\002" +
    "\000\002\014\004\000\002\014\003\000\002\014\004\000" +
    "\002\015\010\000\002\015\010\000\002\015\007\000\002" +
    "\015\006\000\002\015\005\000\002\015\004\000\002\016" +
    "\005\000\002\016\005\000\002\016\004\000\002\017\005" +
    "\000\002\017\005\000\002\017\003\000\002\020\003\000" +
    "\002\020\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\022\005\000\002\022\005\000\002\022\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\006\003\005\004\006\001\002\000\004\002" +
    "\126\001\002\000\004\002\ufffc\001\002\000\006\003\007" +
    "\005\010\001\002\000\004\002\ufffd\001\002\000\006\003" +
    "\012\006\011\001\002\000\006\003\013\007\015\001\002" +
    "\000\004\002\ufffe\001\002\000\004\002\uffff\001\002\000" +
    "\004\002\001\001\002\000\012\003\017\013\023\014\020" +
    "\015\022\001\002\000\006\003\123\011\122\001\002\000" +
    "\016\002\ufff8\003\ufff8\010\ufff8\012\ufff8\017\ufff8\020\ufff8" +
    "\001\002\000\006\003\ufff1\011\ufff1\001\002\000\016\003" +
    "\ufff6\011\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\001\002" +
    "\000\006\003\ufff0\011\ufff0\001\002\000\006\003\ufff2\011" +
    "\ufff2\001\002\000\016\003\034\011\033\013\023\014\020" +
    "\015\022\016\031\001\002\000\010\003\uffec\010\uffec\012" +
    "\uffec\001\002\000\016\003\ufff7\011\ufff7\013\ufff7\014\ufff7" +
    "\015\ufff7\016\ufff7\001\002\000\010\003\117\010\116\012" +
    "\115\001\002\000\010\003\uffeb\010\uffeb\012\uffeb\001\002" +
    "\000\006\003\043\005\044\001\002\000\010\003\uffed\010" +
    "\uffed\012\uffed\001\002\000\006\003\035\023\036\001\002" +
    "\000\016\002\ufff9\003\ufff9\010\ufff9\012\ufff9\017\ufff9\020" +
    "\ufff9\001\002\000\010\003\uffc8\010\uffc8\012\uffc8\001\002" +
    "\000\010\003\042\011\037\021\040\001\002\000\026\003" +
    "\uffd2\006\uffd2\010\uffd2\012\uffd2\024\uffd2\025\uffd2\026\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\001\002\000\026\003\uffd1\006" +
    "\uffd1\010\uffd1\012\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\001\002\000\010\003\uffca\010\uffca\012" +
    "\uffca\001\002\000\010\003\uffc9\010\uffc9\012\uffc9\001\002" +
    "\000\010\003\uffe5\010\uffe5\012\uffe5\001\002\000\010\003" +
    "\047\011\037\021\040\001\002\000\006\003\062\006\061" +
    "\001\002\000\022\003\uffd3\006\uffd3\024\056\025\053\026" +
    "\052\027\055\030\054\031\051\001\002\000\010\003\uffe6" +
    "\010\uffe6\012\uffe6\001\002\000\010\003\060\011\037\021" +
    "\040\001\002\000\010\003\uffcb\011\uffcb\021\uffcb\001\002" +
    "\000\010\003\uffce\011\uffce\021\uffce\001\002\000\010\003" +
    "\uffcf\011\uffcf\021\uffcf\001\002\000\010\003\uffcc\011\uffcc" +
    "\021\uffcc\001\002\000\010\003\uffcd\011\uffcd\021\uffcd\001" +
    "\002\000\010\003\uffd0\011\uffd0\021\uffd0\001\002\000\006" +
    "\003\uffd5\006\uffd5\001\002\000\006\003\uffd4\006\uffd4\001" +
    "\002\000\006\003\063\022\064\001\002\000\010\003\uffe7" +
    "\010\uffe7\012\uffe7\001\002\000\010\003\uffe8\010\uffe8\012" +
    "\uffe8\001\002\000\006\003\065\007\015\001\002\000\010" +
    "\003\uffe9\010\uffe9\012\uffe9\001\002\000\014\003\uffe2\010" +
    "\uffe2\012\uffe2\017\073\020\071\001\002\000\014\003\uffe4" +
    "\010\uffe4\012\uffe4\017\073\020\071\001\002\000\010\003" +
    "\uffea\010\uffea\012\uffea\001\002\000\006\003\107\022\110" +
    "\001\002\000\010\003\uffe3\010\uffe3\012\uffe3\001\002\000" +
    "\006\003\075\005\076\001\002\000\014\003\uffe0\010\uffe0" +
    "\012\uffe0\017\uffe0\020\uffe0\001\002\000\014\003\uffd9\010" +
    "\uffd9\012\uffd9\017\uffd9\020\uffd9\001\002\000\010\003\100" +
    "\011\037\021\040\001\002\000\006\003\102\006\101\001" +
    "\002\000\014\003\uffda\010\uffda\012\uffda\017\uffda\020\uffda" +
    "\001\002\000\006\003\103\022\104\001\002\000\014\003" +
    "\uffdb\010\uffdb\012\uffdb\017\uffdb\020\uffdb\001\002\000\014" +
    "\003\uffdc\010\uffdc\012\uffdc\017\uffdc\020\uffdc\001\002\000" +
    "\006\003\105\007\015\001\002\000\014\003\uffdd\010\uffdd" +
    "\012\uffdd\017\uffdd\020\uffdd\001\002\000\014\003\uffde\010" +
    "\uffde\012\uffde\017\uffde\020\uffde\001\002\000\014\003\uffd6" +
    "\010\uffd6\012\uffd6\017\uffd6\020\uffd6\001\002\000\006\003" +
    "\111\007\015\001\002\000\014\003\uffd7\010\uffd7\012\uffd7" +
    "\017\uffd7\020\uffd7\001\002\000\014\003\uffd8\010\uffd8\012" +
    "\uffd8\017\uffd8\020\uffd8\001\002\000\014\003\uffdf\010\uffdf" +
    "\012\uffdf\017\uffdf\020\uffdf\001\002\000\014\003\uffe1\010" +
    "\uffe1\012\uffe1\017\uffe1\020\uffe1\001\002\000\010\003\120" +
    "\011\033\016\031\001\002\000\016\002\ufffb\003\ufffb\010" +
    "\ufffb\012\ufffb\017\ufffb\020\ufffb\001\002\000\016\002\ufffa" +
    "\003\ufffa\010\ufffa\012\ufffa\017\ufffa\020\ufffa\001\002\000" +
    "\010\003\uffee\010\uffee\012\uffee\001\002\000\010\003\uffef" +
    "\010\uffef\012\uffef\001\002\000\006\003\125\012\124\001" +
    "\002\000\016\003\ufff3\011\ufff3\013\ufff3\014\ufff3\015\ufff3" +
    "\016\ufff3\001\002\000\016\003\ufff5\011\ufff5\013\ufff5\014" +
    "\ufff5\015\ufff5\016\ufff5\001\002\000\016\003\ufff4\011\ufff4" +
    "\013\ufff4\014\ufff4\015\ufff4\016\ufff4\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\023\006\020" +
    "\007\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\025\007\015\010\026\011\031\012" +
    "\027\022\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\044\020\045\001\001\000\002\001" +
    "\001\000\004\021\047\001\001\000\002\001\001\000\004" +
    "\020\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\065" +
    "\001\001\000\002\001\001\000\012\013\067\014\066\015" +
    "\073\016\071\001\001\000\006\015\113\016\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\076\020\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\120\012\027\022\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   public int errNo = 0;

   public static void main( String[] args )
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   Scanner scanner = new MPLexer( file );
		   MPParser parser = new MPParser( scanner );
		   parser.parse();
	  }
	  catch( Exception e )
	  {
		   e.printStackTrace();
	  }
   }

   public void syntax_error(Symbol cur_token)
   {
   	  
   }
   
   public void report_error(String message, Object info)
   {
   	   System.out.print( message );
   }
   
   public int getLine()
   {
   	  return ((MPLexer) getScanner()).getLine();
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParser$actions {
  private final MPParser parser;

  /** Constructor */
  CUP$MPParser$actions(MPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser$result;

      /* select the action based on the action number */
      switch (CUP$MPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Assignment ::= ID error 
            {
              Object RESULT = null;
		
                  System.out.println(parser.getLine() + ": " + "Nedostaje operator dodele ':='");
			      parser.errNo++;
       	       
              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*Assignment*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Assignment ::= ID ASSIGN error 
            {
              Object RESULT = null;
		
                  System.out.println(parser.getLine() + ": " + "Nedostaje desna strana operatora dodele");
			      parser.errNo++;
       	       
              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*Assignment*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Assignment ::= ID ASSIGN Term 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*Assignment*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RelOp ::= GREATEREQ 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RelOp ::= GREATER 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RelOp ::= NOTEQ 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // RelOp ::= EQ 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RelOp ::= LESSEQ 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RelOp ::= LESS 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Term ::= CONST 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Term ::= ID 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RelExpression ::= Term 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RelExpression ::= Term RelOp error 
            {
              Object RESULT = null;
		
                     System.out.println(parser.getLine() + ": " + "Nedostaje drugi operand u relacionom izrazu");
			         parser.errNo++;
       	          
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RelExpression ::= Term RelOp Term 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ElseStatement ::= ELSE error 
            {
              Object RESULT = null;
		
                     System.out.println(parser.getLine() + ": " + "Nedostaje ':' za pocetak 'else' bloka");
			         parser.errNo++;
       	          
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*ElseStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ElseStatement ::= ELSE COLON error 
            {
              Object RESULT = null;
		
                     System.out.println(parser.getLine() + ": " + "Nedostaje 'else' blok naredbi");
			         parser.errNo++;
       	          
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*ElseStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ElseStatement ::= ELSE COLON Block 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*ElseStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Elif ::= ELIF error 
            {
              Object RESULT = null;
		
            System.out.println(parser.getLine() + ": " + "Nedostaje '(' za pocetak 'elif' naredbe");
			parser.errNo++;
       	 
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*Elif*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Elif ::= ELIF LEFTPAR error 
            {
              Object RESULT = null;
		
            System.out.println(parser.getLine() + ": " + "Nedostaje relacioni izraz u 'elif' naredbi");
			parser.errNo++;
       	 
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*Elif*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Elif ::= ELIF LEFTPAR RelExpression error 
            {
              Object RESULT = null;
		
            System.out.println(parser.getLine() + ": " + "Nedostaje ')'");
			parser.errNo++;
       	 
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*Elif*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Elif ::= ELIF LEFTPAR RelExpression RIGHTPAR error 
            {
              Object RESULT = null;
		
            System.out.println(parser.getLine() + ": " + "Nedostaje ':' za pocetak 'then' bloka");
		    parser.errNo++;
       	 
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*Elif*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Elif ::= ELIF LEFTPAR RelExpression RIGHTPAR COLON error 
            {
              Object RESULT = null;
		
            System.out.println(parser.getLine() + ": " + "Nedostaje 'then' blok");
		    parser.errNo++;
       	 
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*Elif*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Elif ::= ELIF LEFTPAR RelExpression RIGHTPAR COLON Block 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*Elif*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ElifList ::= ElifList ElseStatement 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*ElifList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ElifList ::= Elif 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*ElifList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ElifList ::= ElifList Elif 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*ElifList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ElsePart ::= 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*ElsePart*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ElsePart ::= ElseStatement 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*ElsePart*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ElsePart ::= ElifList 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*ElsePart*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IfStatement ::= IF error 
            {
              Object RESULT = null;
		
           	       System.out.println(parser.getLine() + ": " + "Nedostaje '(' za pocetak 'if' naredbe");
			       parser.errNo++;
       	        
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*IfStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IfStatement ::= IF LEFTPAR error 
            {
              Object RESULT = null;
		
           	       System.out.println(parser.getLine() + ": " + "Nedostaje relacioni izraz u 'if' naredbi");
			       parser.errNo++;
       	        
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*IfStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IfStatement ::= IF LEFTPAR RelExpression error 
            {
              Object RESULT = null;
		
           	       System.out.println(parser.getLine() + ": " + "Nedostaje ')'");
			       parser.errNo++;
       	        
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*IfStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IfStatement ::= IF LEFTPAR RelExpression RIGHTPAR error 
            {
              Object RESULT = null;
		
           	       System.out.println(parser.getLine() + ": " + "Nedostaje ':' za pocetak 'then' bloka");
			       parser.errNo++;
       	        
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*IfStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IfStatement ::= IF LEFTPAR RelExpression RIGHTPAR COLON error 
            {
              Object RESULT = null;
		
           	       System.out.println(parser.getLine() + ": " + "Nedostaje 'then' blok");
			       parser.errNo++;
       	        
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*IfStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IfStatement ::= IF LEFTPAR RelExpression RIGHTPAR COLON Block ElsePart 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*IfStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Statement ::= IfStatement 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Statement ::= Assignment 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Statements ::= Statement 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Statements*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Statements ::= Statements SEMICOLON error 
            {
              Object RESULT = null;
		
           	      System.out.println(parser.getLine() + ": " + "Nedostaje poslednja naredba");
			      parser.errNo++;
       	       
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Statements*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Statements ::= Statements SEMICOLON Statement 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Statements*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= BOOL 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= REAL 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= INT 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Variable ::= Type error 
            {
              Object RESULT = null;
		
                System.out.println(parser.getLine() + ": " + "Nedostaje naziv identifikatora");
			    parser.errNo++;
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Variable*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Variable ::= Type ID error 
            {
              Object RESULT = null;
		
                System.out.println(parser.getLine() + ": " + "Nedostaje ';' nakon naziva identifikatora");
			    parser.errNo++;
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Variable*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Variable ::= Type ID SEMICOLON 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Variable*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Variables ::= Variable 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Variables*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Variables ::= Variables Variable 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Variables*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Block ::= LEFTCURLY error 
            {
              Object RESULT = null;
		
              System.out.println(parser.getLine() + ": " + "Nedostaje deklaracija promenljivih");
			  parser.errNo++;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Block ::= LEFTCURLY Variables error 
            {
              Object RESULT = null;
		
              System.out.println(parser.getLine() + ": " + "Nedostaje blok naredbi");
			  parser.errNo++;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Block ::= LEFTCURLY Variables Statements error 
            {
              Object RESULT = null;
		
              System.out.println(parser.getLine() + ": " + "Nedostaje '}' na kraju bloka naredbi");
			  parser.errNo++;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Block ::= LEFTCURLY Variables Statements RIGHTCURLY 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Program ::= error 
            {
              Object RESULT = null;
		
               System.out.println(parser.getLine() + ": " + "Nedostaje 'main'");
			   parser.errNo++;
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= MAIN error 
            {
              Object RESULT = null;
		
               System.out.println(parser.getLine() + ": " + "Nedostaje '('");
			   parser.errNo++;
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= MAIN LEFTPAR error 
            {
              Object RESULT = null;
		
               System.out.println(parser.getLine() + ": " + "Nedostaje ')'");
			   parser.errNo++;
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= MAIN LEFTPAR RIGHTPAR error 
            {
              Object RESULT = null;
		
               System.out.println("Nedostaje blok glavnog programa.");
			   parser.errNo++;
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		RESULT = start_val;
              CUP$MPParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParser$parser.done_parsing();
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= MAIN LEFTPAR RIGHTPAR Block 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

