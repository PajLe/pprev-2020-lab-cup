
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Jan 15 21:53:35 CET 2021
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import SymbolTable.*;

/** CUP v0.10k generated parser.
  * @version Fri Jan 15 21:53:35 CET 2021
  */
public class MPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParser() {super();}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\003\006\000\002\002\004\000\002\004" +
    "\006\000\002\024\003\000\002\025\003\000\002\005\004" +
    "\000\002\005\003\000\002\023\005\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\006\005\000\002" +
    "\006\003\000\002\007\003\000\002\007\003\000\002\010" +
    "\011\000\002\011\003\000\002\011\003\000\002\011\002" +
    "\000\002\012\004\000\002\012\003\000\002\012\004\000" +
    "\002\013\010\000\002\014\005\000\002\020\005\000\002" +
    "\020\003\000\002\022\003\000\002\022\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\016\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\004\004\005\001\002\000\004\002\102\001" +
    "\002\000\004\005\006\001\002\000\004\006\007\001\002" +
    "\000\004\007\012\001\002\000\004\002\001\001\002\000" +
    "\010\012\020\013\015\014\016\001\002\000\010\012\ufffe" +
    "\013\ufffe\014\ufffe\001\002\000\004\030\100\001\002\000" +
    "\014\012\ufffb\013\ufffb\014\ufffb\015\ufffb\030\ufffb\001\002" +
    "\000\004\030\ufff8\001\002\000\004\030\ufff7\001\002\000" +
    "\014\012\020\013\015\014\016\015\025\030\027\001\002" +
    "\000\004\030\ufff9\001\002\000\006\010\ufff4\011\ufff4\001" +
    "\002\000\014\012\ufffc\013\ufffc\014\ufffc\015\ufffc\030\ufffc" +
    "\001\002\000\006\010\075\011\074\001\002\000\006\010" +
    "\ufff3\011\ufff3\001\002\000\004\005\037\001\002\000\006" +
    "\010\ufff5\011\ufff5\001\002\000\004\021\030\001\002\000" +
    "\012\030\032\031\031\032\034\033\036\001\002\000\024" +
    "\006\uffe5\010\uffe5\011\uffe5\022\uffe5\023\uffe5\024\uffe5\025" +
    "\uffe5\026\uffe5\027\uffe5\001\002\000\024\006\uffe7\010\uffe7" +
    "\011\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\001\002\000\006\010\uffdc\011\uffdc\001\002\000\024" +
    "\006\uffe4\010\uffe4\011\uffe4\022\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\001\002\000\024\006\uffe6\010\uffe6" +
    "\011\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027" +
    "\uffe6\001\002\000\024\006\uffe3\010\uffe3\011\uffe3\022\uffe3" +
    "\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\001\002\000" +
    "\012\030\032\031\031\032\034\033\036\001\002\000\004" +
    "\006\052\001\002\000\020\006\uffe8\022\050\023\045\024" +
    "\044\025\047\026\046\027\042\001\002\000\012\030\uffdd" +
    "\031\uffdd\032\uffdd\033\uffdd\001\002\000\012\030\032\031" +
    "\031\032\034\033\036\001\002\000\012\030\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\001\002\000\012\030\uffe1\031\uffe1\032" +
    "\uffe1\033\uffe1\001\002\000\012\030\uffde\031\uffde\032\uffde" +
    "\033\uffde\001\002\000\012\030\uffdf\031\uffdf\032\uffdf\033" +
    "\uffdf\001\002\000\012\030\uffe2\031\uffe2\032\uffe2\033\uffe2" +
    "\001\002\000\004\006\uffe9\001\002\000\004\020\053\001" +
    "\002\000\004\007\012\001\002\000\012\010\uffef\011\uffef" +
    "\016\060\017\056\001\002\000\012\010\ufff1\011\ufff1\016" +
    "\060\017\056\001\002\000\004\020\070\001\002\000\006" +
    "\010\ufff2\011\ufff2\001\002\000\004\005\063\001\002\000" +
    "\006\010\ufff0\011\ufff0\001\002\000\012\010\uffed\011\uffed" +
    "\016\uffed\017\uffed\001\002\000\012\030\032\031\031\032" +
    "\034\033\036\001\002\000\004\006\065\001\002\000\004" +
    "\020\066\001\002\000\004\007\012\001\002\000\012\010" +
    "\uffeb\011\uffeb\016\uffeb\017\uffeb\001\002\000\004\007\012" +
    "\001\002\000\012\010\uffea\011\uffea\016\uffea\017\uffea\001" +
    "\002\000\012\010\uffec\011\uffec\016\uffec\017\uffec\001\002" +
    "\000\012\010\uffee\011\uffee\016\uffee\017\uffee\001\002\000" +
    "\006\015\025\030\027\001\002\000\014\002\ufffd\010\ufffd" +
    "\011\ufffd\016\ufffd\017\ufffd\001\002\000\014\002\uffff\010" +
    "\uffff\011\uffff\016\uffff\017\uffff\001\002\000\006\010\ufff6" +
    "\011\ufff6\001\002\000\004\011\101\001\002\000\014\012" +
    "\ufffa\013\ufffa\014\ufffa\015\ufffa\030\ufffa\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\007\024\010" +
    "\001\001\000\002\001\001\000\010\005\016\017\012\023" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
    "\022\007\025\010\023\016\020\017\012\023\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\034\022" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\037\021\034\022\040\001\001\000\002" +
    "\001\001\000\004\015\042\001\001\000\002\001\001\000" +
    "\006\021\034\022\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\053" +
    "\024\010\001\001\000\012\011\056\012\054\013\061\014" +
    "\060\001\001\000\006\013\072\014\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\063\021\034\022\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\066\024\010\001\001\000\002\001\001\000\006\004\070" +
    "\024\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\076\010\023\016\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	symbolTable = new SymbolTable();

    }


   public int errNo = 0;
   public int warnNo = 0;
   
   SymbolTable symbolTable;
   
   public static void main( String[] args )
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   java_cup.runtime.Scanner scanner = new MPLexer( file );
		   MPParser parser = new MPParser( scanner );
		   parser.parse();
		   parser.checkWarnings();
		   if ( parser.errNo == 0 && parser.warnNo == 0 )
		      System.out.println( "Analiza zavrsena. U kodu nema gresaka." );
		   else
		      System.out.println( "Analiza zavrsena. Broj gresaka: " + parser.errNo 
		         + " Broj upozorenja: " + parser.warnNo );
	  }
	  catch( Exception e )
	  {
		   System.out.println(e);
	  }
   }
   
   public void checkWarnings()
   {
      SymbolNode current = symbolTable.getVariables();
      while ( current != null )
      {
      	Variable var = ( Variable ) current;
      	if ( var.last_def == -1 && var.last_use == -1 )
      	{
      		System.out.println( "Upozorenje: Promenljiva " + var.name + 
      			" je deklarisana, ali se nigde ne koristi." );
      		warnNo++;
      	}
      	else if ( var.last_def > var.last_use )
      	{
      		System.out.println( "Upozorenje: Vrednost dodeljena promeljivoj " +
      		    var.name + " u liniji " + var.last_def + " se nigde ne koristi." );
      		warnNo++;
      	}
      	current = current.next;
     }
   }
   
   public void syntax_error(Symbol cur_token)
   {
   	  
   }
   
   public void report_error(String message, Object info)
   {
   	   System.out.print( message );
   }
   
   public int getLine()
   {
   	  return (( MPLexer) getScanner()).getLine();
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParser$actions {
  private final MPParser parser;

  /** Constructor */
  CUP$MPParser$actions(MPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser$result;

      /* select the action based on the action number */
      switch (CUP$MPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Assignment ::= ID ASSIGN Term 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		SymbolNode term = (SymbolNode)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
	Variable var = parser.symbolTable.getVar(name);
	if (var == null) {
		System.out.println(parser.getLine() + ": Promenljiva " + name 
			+ " nije deklarisana");
		parser.errNo++; 
	}
	if (term.kind == SymbolNode.VARIABLE) {
		Variable var1 = parser.symbolTable.getVar(term.name);
		if (var1 == null) {
			System.out.println(parser.getLine() + ": Promenljiva " + term.name 
				+ " nije deklarisana");
			parser.errNo++; 
		} else if (var1.value == null) {
			System.out.println(parser.getLine() + ": Promenljiva " + var1.name 
				+ " nije inicijalizovana");
			parser.errNo++; 
		} else if (var != null) {
			TypeNode varType = var.type;
			TypeNode var1Type = var1.type;
			if (varType.tkind == parser.symbolTable.getType("real").tkind
					&& var1Type.tkind == parser.symbolTable.getType("integer").tkind
				|| varType.tkind == var1Type.tkind)
				var.value = var1.value;
			else {
				System.out.println(parser.getLine() + ": Promenljive " + var.name
					+ " i " + var1.name + " moraju biti istog tipa");
				parser.errNo++; 
			}
		}
	} else if (var != null && term.kind == SymbolNode.CONSTANT) {
		TypeNode varType = var.type;
		TypeNode constType = term.type;
		if (varType.tkind == parser.symbolTable.getType("real").tkind
				&& constType.tkind == parser.symbolTable.getType("integer").tkind
			|| varType.tkind == constType.tkind)
			var.value = ((Constant)term).value;
		else {
			System.out.println(parser.getLine() + ": Promenljive " + var.name
				+ " i " + term.name + " moraju biti istog tipa");
			parser.errNo++; 
		}
	}

              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*Assignment*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RelOp ::= GREATEREQ 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RelOp ::= GREATER 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RelOp ::= NOTEQ 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RelOp ::= EQ 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RelOp ::= LESSEQ 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RelOp ::= LESS 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Const ::= BOOLCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
	RESULT = new Constant(parser.symbolTable.getType("boolean"), c);

              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Const*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Const ::= REALCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
	RESULT = new Constant(parser.symbolTable.getType("real"), c);

              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Const*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Const ::= INTCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
	RESULT = new Constant(parser.symbolTable.getType("integer"), c);

              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Const*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Term ::= Const 
            {
              SymbolNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
	RESULT = c;

              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Term ::= ID 
            {
              SymbolNode RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
	Variable var = parser.symbolTable.getVar(name);
	if (var != null)
		RESULT = var;
	else
		RESULT = new Variable(name, null, null);

              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // RelExpression ::= Term 
            {
              TypeNode RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		SymbolNode t1 = (SymbolNode)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
	if (t1.kind == SymbolNode.VARIABLE) {
		Variable var1 = parser.symbolTable.getVar(t1.name);
		if (var1 == null) {
			System.out.println(parser.getLine() + ": Promenljiva " + t1.name 
				+ " nije deklarisana");
			parser.errNo++; 
		} else if (var1.value == null) {
			System.out.println(parser.getLine() + ": Promenljiva " + var1.name 
				+ " nije inicijalizovana");
			parser.errNo++; 
		}
	}
	RESULT = t1.type;

              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // RelExpression ::= Term RelOp Term 
            {
              TypeNode RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		SymbolNode t1 = (SymbolNode)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		SymbolNode t2 = (SymbolNode)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
	int realTkind = parser.symbolTable.getType("real").tkind;
	int intTkind = parser.symbolTable.getType("integer").tkind; 
	if (t1.kind == SymbolNode.VARIABLE) {
		Variable var1 = parser.symbolTable.getVar(t1.name);
		if (var1 == null) {
			System.out.println(parser.getLine() + ": Promenljiva " + t1.name 
				+ " nije deklarisana");
			parser.errNo++; 
		} else if (var1.value == null) {
			System.out.println(parser.getLine() + ": Promenljiva " + var1.name 
				+ " nije inicijalizovana");
			parser.errNo++; 
		} else if (var1.type.tkind != realTkind 
						&& var1.type.tkind != intTkind) {
			System.out.println(parser.getLine() + ": Promenljiva " + var1.name 
				+ " mora biti numerickog tipa da bi se primenio relacioni operator");
			parser.errNo++; 
		}
	}
	if (t2.kind == SymbolNode.VARIABLE) {
		Variable var1 = parser.symbolTable.getVar(t2.name);
		if (var1 == null) {
			System.out.println(parser.getLine() + ": Promenljiva " + t2.name 
				+ " nije deklarisana");
			parser.errNo++; 
		} else if (var1.value == null) {
			System.out.println(parser.getLine() + ": Promenljiva " + var1.name 
				+ " nije inicijalizovana");
			parser.errNo++; 
		} else if (var1.type.tkind != realTkind 
						&& var1.type.tkind != intTkind) {
			System.out.println(parser.getLine() + ": Promenljiva " + var1.name 
				+ " mora biti numerickog tipa da bi se primenio relacioni operator");
			parser.errNo++; 
		}
	}
	RESULT = parser.symbolTable.getType("boolean");

              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ElseStatement ::= ELSE COLON Block 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*ElseStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Elif ::= ELIF LEFTPAR RelExpression RIGHTPAR COLON Block 
            {
              Object RESULT = null;
		int reTypeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left;
		int reTyperight = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).right;
		TypeNode reType = (TypeNode)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).value;
		
	if (reType.tkind != TypeNode.BOOLEAN) {
		System.out.println(parser.getLine() +
			": izraz u ELIF mora biti tipa Boolean");
		parser.errNo++; 
	}

              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Elif*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ElifList ::= ElifList ElseStatement 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*ElifList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ElifList ::= Elif 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*ElifList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ElifList ::= ElifList Elif 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*ElifList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ElsePart ::= 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*ElsePart*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ElsePart ::= ElseStatement 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*ElsePart*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ElsePart ::= ElifList 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*ElsePart*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IfStatement ::= IF LEFTPAR RelExpression RIGHTPAR COLON Block ElsePart 
            {
              Object RESULT = null;
		int reTypeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left;
		int reTyperight = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).right;
		TypeNode reType = (TypeNode)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).value;
		
	if (reType.tkind != TypeNode.BOOLEAN) {
		System.out.println(parser.getLine() +
			": izraz u IF mora biti tipa Boolean");
		parser.errNo++; 
	}

              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*IfStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= IfStatement 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statement ::= Assignment 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statements ::= Statement 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Statements*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Statements ::= Statements SEMICOLON Statement 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Statements*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= BOOL 
            {
              TypeNode RESULT = null;
		
	RESULT = parser.symbolTable.getType("boolean");

              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= REAL 
            {
              TypeNode RESULT = null;
		
	RESULT = parser.symbolTable.getType("real");

              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INT 
            {
              TypeNode RESULT = null;
		
	RESULT = parser.symbolTable.getType("integer");

              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Variable ::= Type ID SEMICOLON 
            {
              Variable RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
	RESULT = new Variable(name, t, null);

              CUP$MPParser$result = new java_cup.runtime.Symbol(17/*Variable*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Variables ::= Variable 
            {
              Object RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
	if (!parser.symbolTable.addVar(var.name, var.type)) {
		System.out.println(parser.getLine() + ": Promenljiva " + var.name 
			+ " je vec deklarisana");
		parser.errNo++; 
	}

              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Variables*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Variables ::= Variables Variable 
            {
              Object RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
	if (!parser.symbolTable.addVar(var.name, var.type)) {
		System.out.println(parser.getLine() + ": Promenljiva " + var.name 
			+ " je vec deklarisana");
		parser.errNo++; 
	}

              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Variables*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ScopeEnd ::= RIGHTCURLY 
            {
              Object RESULT = null;
		
	parser.symbolTable.exitScope();

              CUP$MPParser$result = new java_cup.runtime.Symbol(19/*ScopeEnd*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ScopeStart ::= LEFTCURLY 
            {
              Object RESULT = null;
		
	parser.symbolTable.addScope();

              CUP$MPParser$result = new java_cup.runtime.Symbol(18/*ScopeStart*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Block ::= ScopeStart Variables Statements ScopeEnd 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		RESULT = start_val;
              CUP$MPParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParser$parser.done_parsing();
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= MAIN LEFTPAR RIGHTPAR Block 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

